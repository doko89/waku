name: Auto Tag

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: '1.24'
  APP_NAME: 'waku'

jobs:
  check-and-create-tag:
    name: Check Changes and Create Tag
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_DEPLOY_KEY }}

      - name: Get last tag
        id: last_tag
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "tag=$LAST_TAG" >> $GITHUB_OUTPUT
          echo "Last tag: $LAST_TAG"

      - name: Check for changes since last tag
        id: changes
        run: |
          if [[ -z "${{ steps.last_tag.outputs.tag }}" ]]; then
            # No tags exist, create first tag
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "No previous tags found, will create v1.0.0"
          else
            # Check if there are any commits since last tag
            COMMITS_SINCE_TAG=$(git rev-list --count ${{ steps.last_tag.outputs.tag }}..HEAD)
            if [[ $COMMITS_SINCE_TAG -gt 0 ]]; then
              echo "changes=true" >> $GITHUB_OUTPUT
              echo "Found $COMMITS_SINCE_TAG commits since last tag"
            else
              echo "changes=false" >> $GITHUB_OUTPUT
              echo "No new commits since last tag"
            fi
          fi

      - name: Determine next version (patch + 1)
        id: version
        if: steps.changes.outputs.changes == 'true'
        run: |
          LAST_TAG="${{ steps.last_tag.outputs.tag }}"

          if [[ -z "$LAST_TAG" ]]; then
            # First release
            NEW_VERSION="1.0.0"
          else
            # Extract version numbers (remove 'v' prefix)
            VERSION=${LAST_TAG#v}
            IFS='.' read -ra VERSION_PARTS <<< "$VERSION"

            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}

            # Always increment patch version (patch + 1)
            PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          fi

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Next version: v$NEW_VERSION"

      - name: Create and push tag
        id: tag
        if: steps.changes.outputs.changes == 'true'
        run: |
          TAG="v${{ steps.version.outputs.version }}"

          # Configure Git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Configure git to use SSH
          git remote set-url origin git@github.com:${{ github.repository }}.git

          # Pull latest changes
          git pull origin main

          # Create tag
          git tag -a "$TAG" -m "Release $TAG

          🤖 Generated with [Claude Code](https://claude.com/claude-code)

          Co-Authored-By: Claude <noreply@anthropic.com>"

          # Push tag
          git push origin "$TAG"

          echo "created=true" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

          echo "✅ Tag $TAG created and pushed successfully!"

      - name: Summary
        run: |
          if [[ "${{ steps.changes.outputs.changes }}" == "true" ]]; then
            echo "🎉 Changes detected since last tag" >> $GITHUB_STEP_SUMMARY
            echo "📦 Created new tag: ${{ steps.tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
            echo "🚀 Build and release workflow started automatically" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📋 Release will include:" >> $GITHUB_STEP_SUMMARY
            echo "- Multi-architecture binaries (Linux, Windows, macOS)" >> $GITHUB_STEP_SUMMARY
            echo "- Automatic GitHub release" >> $GITHUB_STEP_SUMMARY
            echo "- SHA256 checksums for verification" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📊 Monitor build progress at: https://github.com/${{ github.repository }}/actions"
          else
            echo "ℹ️ No new changes since last tag (${{ steps.last_tag.outputs.tag }})" >> $GITHUB_STEP_SUMMARY
            echo "🔄 No new tag created" >> $GITHUB_STEP_SUMMARY
          fi