name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build (e.g., v1.0.0)'
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            platform: linux/amd64
          - goos: linux
            goarch: arm64
            platform: linux/arm64
          - goos: linux
            goarch: arm
            goarm: 7
            platform: linux/arm/v7
          - goos: darwin
            goarch: amd64
            platform: darwin/amd64
          - goos: darwin
            goarch: arm64
            platform: darwin/arm64
          - goos: windows
            goarch: amd64
            platform: windows/amd64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
        run: |
          OUTPUT_NAME="waku-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            OUTPUT_NAME="${OUTPUT_NAME}.exe"
          fi
          if [ -n "${{ matrix.goarm }}" ]; then
            OUTPUT_NAME="waku-${{ matrix.goos }}-${{ matrix.goarch }}v${{ matrix.goarm }}"
          fi
          
          CGO_ENABLED=0 go build -a -installsuffix cgo \
            -ldflags="-w -s -X main.Version=${{ steps.version.outputs.VERSION }}" \
            -o "dist/${OUTPUT_NAME}" .
          
          cd dist
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip "${OUTPUT_NAME%.exe}.zip" "${OUTPUT_NAME}"
          else
            tar czf "${OUTPUT_NAME}.tar.gz" "${OUTPUT_NAME}"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: waku-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm && format('v{0}', matrix.goarm) || '' }}
          path: dist/*.{tar.gz,zip}
          if-no-files-found: error

  release:
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} release/ \;
          ls -lah release/

      - name: Generate changelog
        id: changelog
        run: |
          echo "## What's Changed" > CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")..HEAD >> CHANGELOG.md || echo "- Initial release" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## Available Binaries" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "Download the appropriate binary for your platform:" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "- **Linux**: amd64, arm64, arm/v7" >> CHANGELOG.md
          echo "- **macOS**: amd64 (Intel), arm64 (Apple Silicon)" >> CHANGELOG.md
          echo "- **Windows**: amd64" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## Docker Image" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "Build your own Docker image:" >> CHANGELOG.md
          echo '```bash' >> CHANGELOG.md
          echo "docker build -t waku:${GITHUB_REF#refs/tags/v} ." >> CHANGELOG.md
          echo '```' >> CHANGELOG.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

