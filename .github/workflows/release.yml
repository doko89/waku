name: Manual Tag, Build & Release (Go Multi-Arch)

on:
  workflow_dispatch:
    inputs:
      tag_prefix:
        description: 'Prefix tag (contoh: v)'
        default: 'v'
        required: true
      bump:
        description: 'Tipe bump versi (major, minor, patch)'
        default: 'patch'
        required: true

jobs:
  create-tag:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.bump.outputs.new_tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "${{ github.event.inputs.tag_prefix }}0.0.0")
          echo "latest_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump
        run: |
          LATEST="${{ steps.get_tag.outputs.latest_tag }}"
          PREFIX="${{ github.event.inputs.tag_prefix }}"
          VERSION="${LATEST#$PREFIX}"   # hapus prefix (misal 'v')

          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          case "${{ github.event.inputs.bump }}" in
            major) ((MAJOR++)); MINOR=0; PATCH=0 ;;
            minor) ((MINOR++)); PATCH=0 ;;
            patch) ((PATCH++)) ;;
          esac

          NEW_TAG="${PREFIX}${MAJOR}.${MINOR}.${PATCH}"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Create tag and push
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag -a "${{ steps.bump.outputs.new_tag }}" -m "Release ${{ steps.bump.outputs.new_tag }}"
          git push origin "${{ steps.bump.outputs.new_tag }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-release:
    runs-on: ubuntu-latest
    needs: create-tag

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Build multi-arch binaries
        run: |
          TAG=${{ needs.create-tag.outputs.new_tag }}
          mkdir -p dist
          PLATFORMS=("linux/amd64" "linux/arm64" "windows/amd64" "darwin/amd64")

          for PLATFORM in "${PLATFORMS[@]}"; do
            GOOS=${PLATFORM%/*}
            GOARCH=${PLATFORM#*/}
            OUTPUT="dist/myapp-${GOOS}-${GOARCH}"
            if [ "$GOOS" == "windows" ]; then OUTPUT="${OUTPUT}.exe"; fi
            echo "Building $OUTPUT"
            GOOS=$GOOS GOARCH=$GOARCH go build -ldflags="-s -w -X main.Version=$TAG" -o "$OUTPUT" .
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-tag.outputs.new_tag }}
          name: "Release ${{ needs.create-tag.outputs.new_tag }}"
          draft: false
          prerelease: false
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
